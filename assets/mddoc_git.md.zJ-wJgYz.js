import{_ as i,c as t,a3 as e,o as s}from"./chunks/framework.DtMx7FFi.js";const g=JSON.parse('{"title":"公共","description":"","frontmatter":{},"headers":[],"relativePath":"mddoc/git.md","filePath":"mddoc/git.md","lastUpdated":1734517183000}'),n={name:"mddoc/git.md"};function o(p,a,r,l,h,c){return s(),t("div",null,a[0]||(a[0]=[e(`<h3 id="create-a-new-repository-on-the-command-line" tabindex="-1">create a new repository on the command line <a class="header-anchor" href="#create-a-new-repository-on-the-command-line" aria-label="Permalink to &quot;create a new repository on the command line&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>echo &quot;# vitepress_backend&quot; &gt;&gt; README.md</span></span>
<span class="line"><span>git init</span></span>
<span class="line"><span>git add README.md</span></span>
<span class="line"><span>git commit -m &quot;first commit&quot;</span></span>
<span class="line"><span>git branch -M main</span></span>
<span class="line"><span>git remote add origin https://github.com/xqskin/vitepress_backend.git</span></span>
<span class="line"><span>git push -u origin main</span></span></code></pre></div><h3 id="or-push-an-existing-repository-from-the-command-line" tabindex="-1">or push an existing repository from the command line <a class="header-anchor" href="#or-push-an-existing-repository-from-the-command-line" aria-label="Permalink to &quot;or push an existing repository from the command line&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git remote add origin https://github.com/xqskin/vitepress_backend.git</span></span>
<span class="line"><span>git branch -M main</span></span>
<span class="line"><span>git push -u origin main</span></span></code></pre></div><h3 id="一台电脑两个github账号配置" tabindex="-1">一台电脑两个github账号配置 <a class="header-anchor" href="#一台电脑两个github账号配置" aria-label="Permalink to &quot;一台电脑两个github账号配置&quot;">​</a></h3><ol><li>生成密钥 首先是先生成两个SSH密钥，对应你的两个身份(假设为 public 和 private)。</li></ol><p>假设你当初已经用ssh-keygen -t rsa -C “youremail@gmail.com”生成了一对秘钥id_rsa和id_rsa.pub ， 保存在了~/.ssh文件夹内。</p><p>然后，你需要再用另一个邮箱生成一对 private 的秘钥ssh-keygen -t rsa -C “private_email@gmail.com”。这时候要注意重命名，否则会覆盖上面的密钥文件。假设我们生成了一对新的秘钥private 和private.pub。</p><p>然后分别将这两对密钥加入到对应的 GitHub 账户中，这个步骤就略过了。</p><ol start="2"><li>编辑配置文件 编辑~/.ssh/config文件。如果该文件不存在的话，直接创建一个就好。里面的内容如下：</li></ol><h1 id="公共" tabindex="-1">公共 <a class="header-anchor" href="#公共" aria-label="Permalink to &quot;公共&quot;">​</a></h1><p>Host github_public Hostname ssh.github.com IdentityFile ~/.ssh/id_rsa port 443</p><p>#个人 Host github_private Hostname ssh.github.com IdentityFile ~/.ssh/private port 443</p><p>修改完之后，在git bash运行以下命令（@后面的主机名为上面配置文件中填写的Host选项），检查是否正常。</p><p>（先注意一下：这里一定是先把两个公钥添加到对应的 GitHub 账户，再进行下面的 ssh 连接测试，否则肯定是连接不上，会显示 permission denied。）</p><p>ssh -T git@github_public ssh -T git@github_private</p><p>如果都能正常返回如下信息，就说明配置正常。 如果不行 port更改为22</p><p>Hi xxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 同样的方式你就可以配置更多的以SSH登录的不同git用户。</p><ol start="3"><li>配置仓库设置 首先要删除GIT配置的全局用户名和邮件地址，接着在每个项目仓库中按照需求设置不同的user.name和 user.email：</li></ol><h1 id="删除全局设置" tabindex="-1">删除全局设置 <a class="header-anchor" href="#删除全局设置" aria-label="Permalink to &quot;删除全局设置&quot;">​</a></h1><p>git config --global --unset user.name git config --global --unset user.email</p><h1 id="添加本地设置" tabindex="-1">添加本地设置 <a class="header-anchor" href="#添加本地设置" aria-label="Permalink to &quot;添加本地设置&quot;">​</a></h1><h1 id="设置为私有仓库的github账号邮箱和公有账号的github邮箱。" tabindex="-1">设置为私有仓库的GitHub账号邮箱和公有账号的GitHub邮箱。 <a class="header-anchor" href="#设置为私有仓库的github账号邮箱和公有账号的github邮箱。" aria-label="Permalink to &quot;设置为私有仓库的GitHub账号邮箱和公有账号的GitHub邮箱。&quot;">​</a></h1><p>git config --local user.name xxxx git config --local user.email xxx 之后在添加远程仓库的时候，把github.com 修改成github_public 或者github_private就好了（即上述文件中的HOST选项），用上面两个 Host 名称来代替原来的github.com ，（这一步很重要）如：</p><p>git remote add origin git@github_public:xxx/example.git # public user git remote add origin git@github_private:xxx/example.git # priavate user 其实，上面的配置文件的意思就是，按照你设置远程仓库时使用不同的 Host 名称，查找~/.ssh/config文件，使用不同的 SSH 文件连接到 GitHub。这样你就将是以不同的身份访问 GitHub 仓库。</p><p>git branch -M main</p><p>git pull origin master</p><p>设置默认分支名</p><p>git config --global init.defaultBranch main</p>`,29)]))}const d=i(n,[["render",o]]);export{g as __pageData,d as default};
