import{_ as t,c as e,a3 as p,o}from"./chunks/framework.DgyBiAMx.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"skin/maya/矩阵.md","filePath":"skin/maya/矩阵.md","lastUpdated":1733458247000}'),i={name:"skin/maya/矩阵.md"};function n(r,a,d,s,l,c){return o(),e("div",null,a[0]||(a[0]=[p('<h3 id="向量点乘-基础光照" tabindex="-1">向量点乘 基础光照 <a class="header-anchor" href="#向量点乘-基础光照" aria-label="Permalink to &quot;向量点乘 基础光照&quot;">​</a></h3><p>a*b向量叉乘判断是在b在a左边还是右边 判断点是否在平面内</p><p>用三角形边分别乘 都在左边或者右边 代表p在三角形内</p><p>vex 节点：Wrangle</p><h3 id="houdini" tabindex="-1">houdini <a class="header-anchor" href="#houdini" aria-label="Permalink to &quot;houdini&quot;">​</a></h3><p>vector pos0 = {0,0,0}; vector pos1 = {1.0,2.0,0.0}; vector pos2 = {-1.5,1.0,0.0}; int pt0 = addpoint(0,pos0); int pt1 = addpoint(0,pos1); int pt2 = addpoint(0,pos2);</p><p>addprim(0,&quot;polyline&quot;,pt0,pt1); addprim(0,&quot;polyline&quot;,pt0,pt2);</p><p>行 * 列</p><p>方正<br> 3<em>3 4</em>4</p><p>矩阵相乘条件 左边列和右边行相等 得到的矩阵尺寸为左边行 * 右边列</p>',10)]))}const h=t(i,[["render",n]]);export{u as __pageData,h as default};
